[gd_scene load_steps=13 format=2]

[ext_resource path="res://assets/nodes/PlayerCamera.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/ServerRemotePlayer.gd" type="Script" id=2]
[ext_resource path="res://assets/scripts/nodes/movement_nodes/ray_cast_teleport.gd" type="Script" id=3]
[ext_resource path="res://assets/scripts/nodes/movement_nodes/jump_movment_node.gd" type="Script" id=5]

[sub_resource type="GDScript" id=8]
script/source = "extends AccelerationMoveNode
class_name GravityFlipMove


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

func get_display_name()->String:
	return \"Grav Flip\"

# Called when the node enters the scene tree for the first time.
func _ready():
	add_to_group(\"GravityFlipMove\")
	pass # Replace with function body.

func _player_input(event : InputEvent):
	if input_action != \"\" and event.is_action_pressed(input_action):
		acceleration.y *= -1
#		player_node.transform = player_node.transform.rotated(camera_node.project_local_ray_normal(get_viewport().get_mouse_position()),PI)
#		player_node.rotation_degrees.z += 180
#		player_node.rotate(Vector3(0,1,0),PI)
#		var rotate_vec = player_node.global_transform.affine_inverse()*(camera_node.global_transform*Vector3(0,0,-1)-camera_node.global_transform.origin)-player_node.global_transform.origin
		var rotate_vec = (Vector3(1,0,1)*(player_node.global_transform.affine_inverse().basis*camera_node.global_transform.basis.z)).normalized()
#		print(\"player rotate \", rotate_vec)
#		player_node.rotate(rotate_vec,1)
#		print(\"berfor \", player_node.transform)
#		print(\"computed thingydyd \",player_node.transform.basis.rotated(rotate_vec, PI))
		var look_at_point = camera_node.global_transform*Vector3(0,0,-1)
		player_node.global_transform.basis = player_node.global_transform.basis.rotated(rotate_vec, PI)
#		camera_node.gimbal_rotation_degrees.y *= -1
		camera_node.look_at_point(look_at_point)
#		print(\"atfer \", player_node.transform)
#		camera_node.rotate_d(180)
# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[sub_resource type="CapsuleShape" id=1]

[sub_resource type="CubeMesh" id=2]
size = Vector3( 0.1, 0.1, 2 )

[sub_resource type="SpatialMaterial" id=3]
albedo_color = Color( 0, 0, 1, 1 )

[sub_resource type="CubeMesh" id=4]
size = Vector3( 0.1, 2, 0.1 )

[sub_resource type="SpatialMaterial" id=5]
albedo_color = Color( 0, 1, 0, 1 )

[sub_resource type="CubeMesh" id=6]
size = Vector3( 2, 0.1, 0.1 )

[sub_resource type="SpatialMaterial" id=7]
albedo_color = Color( 1, 0, 0, 1 )

[node name="Player" type="KinematicBody"]
script = ExtResource( 2 )
movement_node_manager_node = NodePath("Movement Nodes")
do_player_input = true

[node name="Movement Nodes" type="Node" parent="."]

[node name="Jump" type="Node" parent="Movement Nodes"]
script = ExtResource( 5 )
player_node_path = NodePath("../..")
input_action = "jump"
max_jumps = 5

[node name="GravityFlipMove" type="Node" parent="Movement Nodes"]
script = SubResource( 8 )

[node name="RayCastTeleportMove" type="Node" parent="Movement Nodes"]
script = ExtResource( 3 )

[node name="Movement Inventory" type="Node" parent="."]

[node name="HRotation" parent="." instance=ExtResource( 1 )]

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
shape = SubResource( 1 )

[node name="Z" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="Y" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0 )
mesh = SubResource( 4 )
material = SubResource( 5 )

[node name="X" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0 )
mesh = SubResource( 6 )
material = SubResource( 7 )
